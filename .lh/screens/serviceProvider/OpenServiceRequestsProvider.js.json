{
    "sourceFile": "screens/serviceProvider/OpenServiceRequestsProvider.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1747648795444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748408621488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n   const getOpenServiceRequests = async () => {\r\n     // Fetch open service requests from the database\r\n   \r\n     try {\r\n-      let boundingBox = getBoundingBox(userData.latitude, userData.longitude, userData.available_distance);\r\n+      let boundingBox = getBoundingBox(userData.latitude, userData.longitude, 20);\r\n       const response = await database.listDocuments(DATABASE_ID, COLLECTION_IDs.service_requests, [Query.equal('service_type',userData.service_type),Query.equal('status', 'open'),Query.between('latitude', boundingBox.minLat, boundingBox.maxLat),Query.between('longitude', boundingBox.minLon, boundingBox.maxLon)]);\r\n       \r\n       findRequestsWithinDistance(response.documents);\r\n     } catch (error) {\r\n"
                }
            ],
            "date": 1747648795444,
            "name": "Commit-0",
            "content": "import { View, Text, TouchableOpacity,Image,ScrollView } from 'react-native'\r\nimport React, { useState,useEffect, useContext } from 'react'\r\nimport { database,DATABASE_ID,COLLECTION_IDs } from '../../AppWrite'\r\nimport { Query } from 'react-native-appwrite'\r\nimport { useNavigation } from '@react-navigation/native'\r\nimport { useRoute } from '@react-navigation/native'\r\nimport { UserContext } from '../../context/UserContext'\r\nimport { get } from 'react-native/Libraries/TurboModule/TurboModuleRegistry'\r\nimport * as Location from 'expo-location'\r\nimport { Alert } from 'react-native'\r\n\r\nexport default function OpenServiceRequestsProvider() {\r\nconst navigation = useNavigation()\r\nconst route = useRoute()\r\nconst {userData}=useContext(UserContext);\r\n\r\n\r\n const [OpenRequests, setOpenRequests] = useState([]);\r\n function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\r\n  const R = 6371; // Radius of the earth in km\r\n  const dLat = deg2rad(lat2 - lat1);\r\n  const dLon = deg2rad(lon2 - lon1);\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c; // Distance in km\r\n  return d;\r\n}\r\nconst getLocation = async () => {\r\n    let { status } = await Location.requestForegroundPermissionsAsync();\r\n    if (status !== 'granted') {\r\n      Alert.alert('Permission Denied', 'Location permission is required to post a job.');\r\n      return;\r\n    }\r\n\r\n    const loc = await Location.getCurrentPositionAsync({});\r\n   return loc.coords;\r\n  };\r\nfunction deg2rad(deg) {\r\n  return deg * (Math.PI / 180);\r\n}\r\nfunction getBoundingBox(lat, lon, distanceKm) {\r\n  const earthRadius = 6371; // in km\r\n\r\n  const deltaLat = distanceKm / earthRadius;\r\n  const deltaLon = distanceKm / (earthRadius * Math.cos((Math.PI * lat) / 180));\r\n\r\n  const minLat = lat - (deltaLat * 180) / Math.PI;\r\n  const maxLat = lat + (deltaLat * 180) / Math.PI;\r\n  const minLon = lon - (deltaLon * 180) / Math.PI;\r\n  const maxLon = lon + (deltaLon * 180) / Math.PI;\r\n\r\n  return {\r\n    minLat,\r\n    maxLat,\r\n    minLon,\r\n    maxLon,\r\n  };\r\n}\r\n\r\n let findRequestsWithinDistance =  async(requests) => {\r\n  let location = await getLocation();\r\n  console.log(\"User Location: \", location);\r\n           const nearbyRequests = requests.filter(request => {\r\n    const distance = getDistanceFromLatLonInKm(location.latitude, location.longitude, request.latitude, request.longitude);\r\n  \r\n    return distance <= userData.available_distance; // Filter requests within 5 km radius\r\n           });\r\n           setOpenRequests(nearbyRequests);\r\n }\r\n useEffect(() => {\r\n \r\n    getOpenServiceRequests()\r\n  }, [])\r\n  const getOpenServiceRequests = async () => {\r\n    // Fetch open service requests from the database\r\n  \r\n    try {\r\n      let boundingBox = getBoundingBox(userData.latitude, userData.longitude, userData.available_distance);\r\n      const response = await database.listDocuments(DATABASE_ID, COLLECTION_IDs.service_requests, [Query.equal('service_type',userData.service_type),Query.equal('status', 'open'),Query.between('latitude', boundingBox.minLat, boundingBox.maxLat),Query.between('longitude', boundingBox.minLon, boundingBox.maxLon)]);\r\n      \r\n      findRequestsWithinDistance(response.documents);\r\n    } catch (error) {\r\n      console.error('Error fetching open service requests:', error);\r\n    }\r\n  \r\n  };\r\n \r\n  \r\n  \r\n \r\n  const serviceTypes = {\r\n    mechanic: \"Mechanic\",\r\n    plumber: \"Plumber\",\r\n    electrician: \"Electrician\",\r\n    construction_worker: \"Construction Worker\",\r\n    painter: \"Painter\",\r\n    carpenter: \"Carpenter\",\r\n    ac_technician: \"AC Technician\",\r\n  };\r\n  return (\r\n    <ScrollView>\r\n    <View style={{\r\n      width: '100%',}}>\r\n     \r\n      {OpenRequests.map((request) => (\r\n   <TouchableOpacity\r\n   key={request.request_id}\r\n   onPress={() => navigation.navigate('ViewServiceRequestsProvider', { request: request,userData:userData })}  // Navigate to the request details screen\r\n   style={{\r\n       // White background for a clean look\r\n     borderBottomWidth: 1,  // Only the bottom border\r\n     borderBottomColor: '#B0B0B0',  // Light gray border color\r\n     padding: 20,\r\n        \r\n   }}\r\n >\r\n   <View >\r\n     <Text style={{ fontWeight: 'bold', color: '#333' }}>\r\n       {request.request_title}\r\n     </Text>\r\n   </View>\r\n   <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>\r\n     <Text style={{ color: '#666' }}>\r\n       {serviceTypes[request.service_type]}\r\n     </Text>\r\n     <Text style={{ fontWeight: 'bold', color: '#333' }}>\r\n       Proposals: {request.proposals.length}\r\n     </Text>\r\n   </View>\r\n </TouchableOpacity>\r\n \r\n     \r\n      ))}\r\n      {OpenRequests.length === 0 && <Text>No open service requests available.</Text>}\r\n    </View>\r\n    </ScrollView>\r\n  )\r\n}"
        }
    ]
}