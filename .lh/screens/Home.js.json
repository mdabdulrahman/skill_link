{
    "sourceFile": "screens/Home.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748408526473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748408526473,
            "name": "Commit-0",
            "content": "import {React,useState,useEffect, use} from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet ,ActivityIndicator} from 'react-native';\r\nimport { account,database } from '../AppWrite';\r\nimport { Query } from 'react-native-appwrite';\r\nimport { COLLECTION_IDs, DATABASE_ID } from '../AppWrite';\r\nimport { logOut } from '../Authentication';\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useContext } from 'react';\r\nimport * as Notifications from 'expo-notifications';\r\n\r\nimport { UserContext } from '../context/UserContext';\r\nimport { registerForPushNotificationsAsync } from '../utils/registerForPushNotificationsAsync';\r\n\r\nexport default function Home({ navigation }) {\r\n  const {setUserData} = useContext(UserContext);\r\n\r\n Notifications.setNotificationHandler({\r\n    handleNotification: async () => ({\r\n      shouldShowAlert: true,\r\n      shouldPlaySound: true,\r\n      shouldSetBadge: true,\r\n    }),\r\n  });\r\n  const [token, setToken] = useState(null);\r\nuseEffect(() => {\r\n  \r\n/*   registerForPushNotificationsAsync().then(async token => {\r\n    \r\n   setToken(token);\r\n  \r\n  }); */\r\n  /* const subscription = Notifications.addNotificationReceivedListener(notification => {\r\n    console.log(notification);\r\n  }); */\r\n /*  return () => subscription.remove(); */ // Clean up the subscription on unmount\r\n\r\n}, [])\r\n\r\n  \r\n  let userid ; \r\n  let getuserData = async(pushtoken)=>\r\n      {\r\n          await account.get().then((response) => {\r\n  \r\n    userid = response.$id; // Get the user ID from the response\r\n  }).catch((error) => {\r\n    console.error('Error fetching user data:', error);\r\n  }   );\r\n  await database.listDocuments(DATABASE_ID, COLLECTION_IDs.users, [Query.equal('userId', userid)]).then((response) => {\r\n      \r\n      let userData = response.documents[0];\r\n      AsyncStorage.setItem(\"user_document_id\", response.documents[0].$id);\r\n      userData.push_token = pushtoken;\r\n     \r\n      setUserData(userData);\r\n      if(userData.role == \"service_provider\") navigation.replace(\"ServiceProviderHome\");\r\n      else navigation.replace(\"ServiceSeekerHome\");\r\n\r\n    }).catch((error) => {\r\n      console.error('Error fetching user data:', error);\r\n    }\r\n    );\r\n}\r\n    useEffect(() => {\r\n      const checkLoginStatus = async (pushtoken) => {\r\n        try {\r\n          const response = await account.get();\r\n         \r\n          getuserData(pushtoken);\r\n        } catch (error) {\r\n            navigation.replace('GetStarted'); // Navigate to GetStarted screen if user is logged in\r\n          \r\n        }\r\n     \r\n      };\r\n      registerForPushNotificationsAsync().then( pushtoken => {\r\n   \r\n        checkLoginStatus(pushtoken);\r\n       });\r\n    \r\n\r\n      \r\n     \r\n    }\r\n    , []);\r\n \r\n   \r\n  const handleLogout = async() => {\r\n    // Clear session if needed\r\n   logOut(navigation);\r\n\r\n\r\n  };\r\n\r\n  return (<>\r\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#fff' }}>\r\n      <ActivityIndicator size=\"large\" color=\"#000\" />\r\n    </View></>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { flex: 1 ,paddingTop:20,backgroundColor:\"#fff\"},\r\n  text: { fontSize: 24, fontWeight: 'bold' },\r\n  subText: { fontSize: 18, marginVertical: 10 },\r\n  button: { backgroundColor: '#ff4444', padding: 10, borderRadius: 8, marginTop: 20 },\r\n  buttonText: { color: '#fff', fontWeight: 'bold' },\r\n});\r\n"
        }
    ]
}