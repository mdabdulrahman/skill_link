{
    "sourceFile": "utils/sendNotificationToNearby.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1747649288590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748408518567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n }\r\n \r\n async function getAllServiceProvidersLocation() {\r\n console.log(\"Fetching all service providers location...\");\r\n-let boundingBox = getBoundingBox(latitude, longitude, 5); // 5 km radius\r\n+let boundingBox = getBoundingBox(latitude, longitude, 20); // 20 km radius\r\n     await database.listDocuments(DATABASE_ID, COLLECTION_IDs.users, [Query.equal('role', \"service_provider\"),Query.equal('service_type',requestData.service_type),Query.equal('isavailable',true)],\r\n     Query.between(\"latitude\",boundingBox.minLat,boundingBox.maxLat),Query.between(\"longitude\",boundingBox.minLon,boundingBox.maxLat) ).then((response) => {\r\n         \r\n         \r\n"
                }
            ],
            "date": 1747649288590,
            "name": "Commit-0",
            "content": "import { Query } from \"react-native-appwrite\";\r\nimport { database } from \"../AppWrite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { DATABASE_ID, COLLECTION_IDs } from \"../AppWrite\";\r\n\r\n\r\n\r\nexport default function sendNotificationToNearby(latitude, longitude,requestData) {\r\n\r\n\r\n\r\n\r\ngetAllServiceProvidersLocation();\r\nfunction findNearestProviders(Providers) {\r\n    console.log(\"Providers: \", Providers.length);\r\n    const nearbyProviders = Providers.filter(provider => {\r\n        const distance = getDistanceFromLatLonInKm(latitude, longitude, provider.latitude, provider.longitude);\r\n        provider.distance = distance; // Add distance to provider object for debugging\r\n        return distance <= provider.available_distance; // 5 km radius\r\n    });\r\n    console.log(\"Nearby Providers: \", nearbyProviders.length);\r\n    sendPushNotification(nearbyProviders);\r\n}\r\n\r\nasync function sendPushNotification(nearbyProviders) {\r\n    const messages = nearbyProviders.map(provider => {\r\n        return {\r\n            to: provider.push_token,\r\n            title: requestData.request_title+\",Service Seeker is \"+provider.distance+\" km away\",\r\n            body: requestData.request_description,\r\n            data: { type:\"service_request\",requestId: requestData.request_id },\r\n            \r\n        };\r\n    });\r\n    await fetch('https://exp.host/--/api/v2/push/send', {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Accept-encoding': 'gzip, deflate',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(messages),\r\n      }).then((response) => {\r\n        console.log(\"Push notification sent successfully: \", response);\r\n      } )\r\n    }\r\n\r\nfunction getBoundingBox(lat, lon, distanceKm) {\r\n  const earthRadius = 6371; // in km\r\n\r\n  const deltaLat = distanceKm / earthRadius;\r\n  const deltaLon = distanceKm / (earthRadius * Math.cos((Math.PI * lat) / 180));\r\n\r\n  const minLat = lat - (deltaLat * 180) / Math.PI;\r\n  const maxLat = lat + (deltaLat * 180) / Math.PI;\r\n  const minLon = lon - (deltaLon * 180) / Math.PI;\r\n  const maxLon = lon + (deltaLon * 180) / Math.PI;\r\n\r\n  return {\r\n    minLat,\r\n    maxLat,\r\n    minLon,\r\n    maxLon,\r\n  };\r\n}\r\n\r\nasync function getAllServiceProvidersLocation() {\r\nconsole.log(\"Fetching all service providers location...\");\r\nlet boundingBox = getBoundingBox(latitude, longitude, 5); // 5 km radius\r\n    await database.listDocuments(DATABASE_ID, COLLECTION_IDs.users, [Query.equal('role', \"service_provider\"),Query.equal('service_type',requestData.service_type),Query.equal('isavailable',true)],\r\n    Query.between(\"latitude\",boundingBox.minLat,boundingBox.maxLat),Query.between(\"longitude\",boundingBox.minLon,boundingBox.maxLat) ).then((response) => {\r\n        \r\n        \r\n        findNearestProviders(response.documents);\r\n  \r\n      }).catch((error) => {\r\n        console.error('Error fetching user data:', error);\r\n      }\r\n      );\r\n}\r\n\r\n    // Helper to calculate distance between two geo points\r\nfunction getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\r\n    const R = 6371; // Radius of the earth in km\r\n    const dLat = deg2rad(lat2 - lat1);\r\n    const dLon = deg2rad(lon2 - lon1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const d = R * c; // Distance in km\r\n    return d;\r\n  }\r\n  \r\n  function deg2rad(deg) {\r\n    return deg * (Math.PI / 180);\r\n  }\r\n  \r\n}"
        }
    ]
}